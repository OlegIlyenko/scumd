<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://asolutions.com/schema/spring/scumd" xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://asolutions.com/schema/spring/scumd http://asolutions.com/schema/spring/scumd/scumd-0.1.0.xsd">

    <!--
        Git SSH server. You can configure most of the properties here.
        You can also define more than one server within configuration.

        You can define ACL, user DAO and server key pair within <git-ssh-server /> tag or provide
        them as references through attributes (acl-ref, user-dao-ref, user-dao-acl-ref) and then define them
        elsewhere in the document (with correspondent 'id' attribute). You can also define
        ACL, user DAO and server key pair outside <git-ssh-server /> tag and without 'id' attribute,
        and in this case they would be used by all git servers defined in this file automatically.

        In this example git URL (for localhost) would look like this:
            ssh://testuser@localhost:1122/testrepo.git

        If you want to create new repository, you can clone non existing repository:
            git clone ssh://testuser@localhost:1122/testrepo.git

        or create new repo locally (or you can use one you already have):
            git init testrepo
            cd testrepo
            vim testfile.txt
            git add testfile.txt
            git commit -m "initial commit"
        then you should add new origin:
            git remote add origin ssh://testuser@localhost:1122/testrepo.git
        and push it:
            git push origin master

        Please note, if you want user to be able to create new repositories, he should have 'Create' permission.
    -->
    <git-ssh-server port="1122" repositories-base="${gitRepos}">

        <!--
            This is default key pair. For production usage you can use another keys.
            Pleas refer the end of this file in order to find out more.
        -->
        <default-server-key-pair />

    </git-ssh-server>

    <!--
        You can load User DAO and repository ACL from file.

         This file should have the same structure like this one,
         but it allowed to contain only one <acl /> and <simple-user-dao /> definitions.

         When you use separate file for User DAO and ACL, then server will automatically
         detect changes to the file and reload it.
    -->
    <!--
    <file-user-dao-acl file="/path/to/acl/file" />
    -->

    <!--
        You can also use database to store users, groups and repository ACL information.

        All you need to do is to provide your database connection information.
        All needed tables would be created automatically.

        At the moment I have tested it against MySql, but if you want to use another database and
        something is not working, then you can customize sql statements by providing sql-statements-file attribute.

        Please, don't forget to add JDBC driver to the classpath, when you are starting the server.
        For example:
          java -cp /path/to/my-database-driver.jar;scumd-VERSION.jar com.asolutions.scmsshd.runner.ScumdConfigurableRunner
    -->
    <!--
    <database-user-dao-acl url="jdbc:mysql://localhost:3306/git"
                           username="gitadmin"
                           password="secret"
                           driver-class="com.mysql.jdbc.Driver">
        <dbcp-connection-pool/>
    </database-user-dao-acl>
    -->

    <!-- Here is an example of the full database configuration -->
    <!--
    <database-user-dao-acl url="jdbc:mysql://localhost:3306/git"
                           username="gitadmin"
                           password="secret"
                           driver-class="com.mysql.jdbc.Driver"
                           sql-statements-file="/path/to/my/sql-statements-file.properties">
        <dbcp-connection-pool max-idle="10"
                              min-idle="5"
                              max-active="20"
                              max-wait="1000"
                              min-evictable-idle-time-millis="15000"
                              num-tests-per-eviction-run="2"
                              max-open-prepared-statements="20" />
    </database-user-dao-acl>
    -->

    <!--
        Access Control List (ACL) for the repositories
    -->
    <acl>

        <repository path="testrepo.git">
            <users allow="Create, ReadWrite" list="testuser" />
        </repository>

        <!--
            Example of the ACL.
            Path is comma separated list of ANT-like paths.
            Available privileges are:
              * ReadWrite
              * ReadOnly
              * Create - in this case new bare repository would be created during 'clone' or 'push' operations (if it does not exist).
        -->
        <!--
        <repository path="**/*.git">
            <groups allow="ReadWrite, Create" list="developers, generic-group-1" />
            <users allow="ReadWrite">user1, user2"</users>
        </repository>

        <repository path="public/*.git, public-*.git">
            <groups allow="ReadOnly" list="public" />
        </repository>
        -->
    </acl>

    <!-- User DAO. At the moment only simple implementation available. It can be defined like this (or, of course, within git server tag). -->
    <simple-user-dao>

        <user name="testuser" password="secret" />

        <!-- you can nest users within groups -->
        <group name="public">
            <!-- password in user tag is raw text (not checksum) -->
            <!--
            <user name="user1" password="hello" active="false" expire="2011-01-01" />
            -->

            <!--
            <user name="user2">
                <password password="hello" />
            </user>
            -->

            <!-- you can also provide password checksum (none, md5 and sha1 are supported) -->
            <!--
            <user name="user3">
                <password password="5d41402abc4b2a76b9719d911017c592" checksum="md5" />
            </user>
            -->
        </group>

        <group name="developers">
            <!-- You can also user public key auth for some users -->
            <!--
            <user name="user4">
                <public-key file="/path/to/the/id_rsa.pub" />
            </user>
            -->

            <!--
            <user name="user5">
                <public-key file="/path/to/another/key" />
            </user>
            -->
        </group>

        <group name="generic-group-1" />

        <!-- Group list can be also provided through attribute and public keqy can be inline -->
        <!--
        <user name="user6" groups="generic-group-1, public">
            <public-key>
                ssh-rsa BASE56OFTHEPUBLICKEY==
            </public-key>
        </user>
        -->

    </simple-user-dao>

    <!-- You can also load server key pair from file -->
    <!--
    <file-server-key-pair>
        <key-file path="/path/to/the/ssh_host_rsa_key" />
        <key-file path="/path/to/the/ssh_host_dsa_key" />
    </file-server-key-pair>
    -->

    <!-- Inline server key pair also supported -->
    <!--
    <simple-server-key-pair>
        <key>
            BEGIN RSA PRIVATE KEY
            MIIEogIBAAKCAQEAuS6dFpfIZF1281yWRiv...
            END RSA PRIVATE KEY
        </key>
        <key>
            BEGIN DSA PRIVATE KEY
            MIIBuwIBAAKBgQDldv2+YEVfSm2nbdS8ZF2r5...
            END DSA PRIVATE KEY
        </key>
    </simple-server-key-pair>
    -->

</beans:beans>
